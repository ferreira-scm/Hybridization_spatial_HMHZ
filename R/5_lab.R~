library(ggplot2)
library(reshape)
library(microbiome)
library(vegan)
library(phyloseq)
library(DECIPHER)
library(phangorn)
library(ShortRead)
library(dada2)
library(dplyr)
library("Hmisc", lib.loc="/usr/local/lib/R/site-library/")
source("R/Correlation_net.R")

### this script does a quality filter (by amplicon) and then some transformations
# TSS --> Total sum scaling (per amplicon) and then merges all amplicon datasets into 1 (PS.TSS)
# fPS is the filered dataset with no normalization

# We also remove the silva handlers from the taxonomic table (all the "g__", "s__"...), so this
#makes the script run slower than expected.

# we do a bit of cleaning up in the sampla data, by adding inputed immune gene responses
# and by inputing the few missing values for BMI and HI

#### we clean up parasite ASVs by individual acessing if each parasite genus likely has several species

# we systematically merge ASV's that are likely from the same taxon. 

#output from this script:
# PS.TSS Relative abundances - total sum scaling
# fPS filtered dataset


#### preprocessing: filtering and transforming

labPS <- readRDS("/SAN/Susanas_den/gitProj/Eimeria_AmpSeq/tmp/Lab/PhyloSeqList_All_Tax_New.Rds")

# this is our filtering function
fil <- function(ps){
    x = phyloseq::taxa_sums(ps)
    # abundance filtering at 0.005%
    keepTaxa = (x / sum(x) > 0.00005)
    summary(keepTaxa)
    ps = phyloseq::prune_taxa(keepTaxa, ps)
# plus prevalnce filter at 1%
    KeepTaxap <- microbiome::prevalence(ps)>0.01
    ps <- phyloseq::prune_taxa(KeepTaxap, ps)
# subset samples based on total read count (100 reads)
#ps <- phyloseq::subset_samples(ps, phyloseq::sample_sums(ps) > 100)
    ps <- phyloseq::prune_samples(sample_sums(ps)>100, ps)
    ps
}

## filtering MA by amplicon
labfPS <- list()
for (i in 1:length(labPS)) {
    try(labfPS[[i]] <- fil(labPS[[i]]), silent=TRUE)
}

# and remove those handlers.
#test <- list()
for (i in 1:length(labfPS)) {
    try(tax_table(labfPS[[i]])[, colnames(tax_table(labfPS[[i]]))] <- gsub(tax_table(labfPS[[i]])[, colnames(tax_table(labfPS[[i]]))], pattern="[a-z]__", replacement=""), silent=TRUE)
}

### now pool all amplicons
l.fPS <- labfPS[[1]]
for (i in 2:length(labfPS)){
    l.fPS <- try(merge_phyloseq(l.fPS,labfPS[[i]]))
    print(l.fPS)
}

#### let's transform by amplicon
l.PS.TSS.l <- list()

for (i in 1:length(labfPS)) {
    try(l.PS.TSS.l[[i]] <- transform_sample_counts(labfPS[[i]], function(x) x / sum(x)), silent=TRUE)
}

l.PS.TSS <- l.PS.TSS.l[[1]]# and pool into 1 phyloseq object
for (i in 2:length(l.PS.TSS.l)){
    l.PS.TSS <- try(merge_phyloseq(l.PS.TSS,l.PS.TSS.l[[i]]))
}

### let's clean up genus column in the tax table
tax <- as.data.frame(tax_table(l.PS.TSS))

tax$Kingdom[is.na(tax$Kingdom)] <- "Unknown_domain"

#tax$Kingdom[!tax$Kingdom%in%c("Bacteria", "Archaea", "Unknown_domain")] <- "Eukarya"
tax[is.na(tax$Genus),]$Genus <- paste0("Unknown_genus_in_",tax[is.na(tax$Genus),]$Family)
tax[which(tax$Genus=="Unknown_genus_in_NA"),]$Genus<-paste0("Unknown_genus_in_",tax[which(tax$Genus=="Unknown_genus_in_NA"),]$Order)
tax[which(tax$Genus=="Unknown_genus_in_NA"),]$Genus<-paste0("Unknown_genus_in_",tax[which(tax$Genus=="Unknown_genus_in_NA"),]$Class)
tax[which(tax$Genus=="Unknown_genus_in_NA"),]$Genus<-paste0("Unknown_genus_in_",tax[which(tax$Genus=="Unknown_genus_in_NA"),]$Phylum)
tax[which(tax$Genus=="Unknown_genus_in_NA"),]$Genus<-paste0("Unknown_genus_in_",tax[which(tax$Genus=="Unknown_genus_in_NA"),]$Kingdom)

tax$Phylum[is.na(tax$Phylum)] <- "Unknown_phylum"
tax$Class[is.na(tax$Class)] <- "Unknown_class"
tax$Order[is.na(tax$Order)] <- "Unknown_order"
tax[which(tax$Genus=="uncultured"),"Genus"] <- paste(tax[which(tax$Genus=="uncultured"),"Order"], tax[which(tax$Genus=="uncultured"),"Genus"], sep="_")

l.PS.TSS@tax_table <-tax_table(as.matrix(tax))


# now we want to merge ASV's that are likely from the same taxon. We expect this because of the multiple amplicons used that amplify same taxons and even within the same amplicon there could be several ASVs from the same taxon due to e.g. multiple gene copy numbers, sequencing errors... Briefly, we do correlation networs per genus, cluster based on positive, significant correlations and merge ASVs within clusters.
# This is different for parasites because we carefully manually evaluate all ASVs for each parasite genus and in here we do this systematically.
library(phyloseq)
library(Hmisc)
library(Matrix)
library(igraph)

genus <- get_taxa_unique(l.PS.TSS, "Genus")

for (i in 1:length(genus)){
#mergingASV <- function(PS.T, gen){
    print(genus[i])
    Kaza <- prune_taxa(tax_table(l.PS.TSS)[,6]%in%genus[i], l.PS.TSS)
#    Kaza <- prune_samples(sample_sums(Kaza)>0, Kaza)
    kaza <- (Kaza@otu_table)
    tax <- data.frame(Kaza@tax_table)
############ correlation matrix################
    otu.cor <- rcorr(as.matrix(kaza), type="spearman")
# p value
    otu.pval <- forceSymmetric(otu.cor$P)
    cor.p <- p.adjust(otu.pval, method="BH") # adjusting for multiple testing
    otu.pval@x<- cor.p
    p.yes <- otu.pval<0.05 # only significant p values
    r.val = otu.cor$r # select all the correlation values
    p.yes.r <- r.val*p.yes # only select correlation values based on p-value criterion
# sanity check
#all(rownames(p.yes.r)==colnames(kaza))
############# network basded on the correlation adjancency matrix
    adjm <- as.matrix(p.yes.r)
#ignoring NAs
    adjm[is.na(adjm)] <- 0
    net.grph=graph.adjacency(adjm,mode="undirected",weighted=TRUE,diag=FALSE)
### remove negative edges
    net=delete.edges(net.grph, which(E(net.grph)$weight<0)) # here's my condition.
plot(net,
     vertex.label="")
    oc <- cluster_fast_greedy(net) # cluster
# and now we merge based on the clustered modules
    group <- list()
    for (i in 1:length(levels(as.factor(oc$membership)))){
        group[[i]] <- oc$names[which(oc$membership==i)]
        l.PS.TSS <- merge_taxa(l.PS.TSS, group[[i]])
    }
}

head(l.PS.TSS@sam_data)

# subset day of infection 0 (non-infected)

lab <- subset_samples(l.PS.TSS, dpi==0)

lab@sam_data$Genome[lab@sam_data$Genome%in%c("mus x mus", "mus")] <- "Mmm"

lab@sam_data$Genome[lab@sam_data$Genome%in%c("dom")] <- "Mmd"

lab@sam_data$Genome[lab@sam_data$Genome%in%c("mus x dom", "dom x mus")] <- "Hybrid"

unique(lab@sam_data$Genome)
lab@sam_data$Hyb[lab@sam_data$Genome%in%c("Mmm", "Mmd")] <- "Parental"
lab@sam_data$Hyb[lab@sam_data$Genome%in%c("Hybrid")] <- "Hybrid"
unique(lab@sam_data$Hyb)

lab2 <- subset_samples(lab, Hyb=="Parental")

#distances
jac <- vegdist(lab@otu_table, method="jaccard")
ait <- vegdist(lab@otu_table, method="aitchison", pseudocount=1)

jac2 <- vegdist(lab2@otu_table, method="jaccard")
ait2 <- vegdist(lab2@otu_table, method="aitchison", pseudocount=1)



permaJ <- adonis2(jac~
                      lab@sam_data$Hyb,
                  by="margin")
permaA <- adonis2(ait~
                      lab@sam_data$Hyb,
                  by="margin")

permaJ2 <- adonis2(jac2~
                      lab2@sam_data$Genome,
                  by="margin")
permaA2 <- adonis2(ait2~
                      lab2@sam_data$Genome,
                  by="margin")

permaA
permaJ

permaA2
permaJ2

J.ord <- ordinate(lab, "NMDS", "jaccard")
pJ=plot_ordination(lab, J.ord, type="sample", color="Genome")
pJ+
    stat_ellipse(aes(group=lab@sam_data$Genome)) 

A.ord <- ordinate(lab, "NMDS", "aitchison")
pA=plot_ordination(lab, A.ord, type="sample", color="Genome")
groups <- sample_data(lab)$Hyb
mod <- betadisper(jac, groups)
anova(mod)
plot(mod, hull=FALSE, ellipse=TRUE)
boxplot(mod)

modA <- betadisper(ait, groups)
anova(modA)
plot(modA, hull=FALSE, ellipse=TRUE)
boxplot(modA)

############ Fungi
get_taxa_unique(lab, "Phylum")

Bac <- subset_taxa(lab, Kingdom %in%"Bacteria")
Bac2 <- subset_taxa(lab2, Kingdom %in%"Bacteria")

Parasite <- subset_taxa(lab, Genus %in%c("Eimeria", "Cryptosporidium", "Syphacia", "Aspiculuris", "Ascaridida", "Mastophorus","Trichuris", "Hymenolepis", "Tritrichomonas", "Oxyurida"))
Parasite2 <- subset_taxa(lab2, Genus %in%c("Eimeria", "Cryptosporidium", "Syphacia", "Aspiculuris", "Ascaridida", "Mastophorus","Trichuris", "Hymenolepis", "Tritrichomonas", "Oxyurida"))

Fungi <- subset_taxa(lab, Kingdom %in% c("Fungi"))
Fungi2 <- subset_taxa(lab2, Kingdom %in% c("Fungi"))

Diet <- subset_taxa(lab, Phylum %in% c("Anthophyta", "Phragmoplastophyta", "Charophyta", "Ochrophyta"))
Diet2 <- subset_taxa(lab2, Phylum %in% c("Anthophyta", "Phragmoplastophyta", "Charophyta", "Ochrophyta"))

#Fungi
jac_F <- vegdist(Fungi@otu_table, method="jaccard")
jac_F[is.na(jac_F)] <- 0 # defining those as 0 distances
ait_F <- vegdist(Fungi@otu_table, method="aitchison", pseudocount=1)
ait_F[is.na(ait_F)] <- 0

FpermaJ <- adonis2(jac_F~
                      lab@sam_data$Hyb,
                  by="margin")
FpermaA <- adonis2(ait_F~
                      lab@sam_data$Hyb,
                  by="margin")


FpermaA
FpermaJ

jac_F2 <- vegdist(Fungi2@otu_table, method="jaccard")
jac_F2[is.na(jac_F2)] <- 0 # defining those as 0 distances
ait_F2 <- vegdist(Fungi2@otu_table, method="aitchison", pseudocount=1)
ait_F2[is.na(ait_F2)] <- 0

FpermaJ2 <- adonis2(jac_F2~
                      Fungi2@sam_data$Genome,
                  by="margin")
FpermaA2 <- adonis2(ait_F2~
                      Fungi2@sam_data$Genome,
                  by="margin")
FpermaA2
FpermaJ2

# stochasticity
FP.ord <- ordinate(Fungi, "NMDS", "jaccard")
FpJ=plot_ordination(Fungi, FP.ord, type="sample", color="Genome")
FpJ+
    stat_ellipse(aes(group=lab@sam_data$Genome)) 
groups <- sample_data(Fungi)$Genome
mod <- betadisper(jac_F, groups)
anova(mod)
plot(mod, hull=FALSE, ellipse=TRUE)
modA <- betadisper(ait_F, groups)
anova(modA)
plot(modA, hull=FALSE, ellipse=TRUE)
boxplot(modA)


#bacteria
jac_B <- vegdist(Bac@otu_table, method="jaccard")
jac_B[is.na(jac_B)] <- 0 # defining those as 0 distances

ait_B <- vegdist(Bac@otu_table, method="aitchison", pseudocount=1)
ait_B[is.na(ait_B)] <- 0

BpermaJ <- adonis2(jac_B~
                      lab@sam_data$Hyb,
                  by="margin")
BpermaA <- adonis2(ait_B~
                      lab@sam_data$Hyb,
                  by="margin")
BpermaA
BpermaJ

jac_B2 <- vegdist(Bac2@otu_table, method="jaccard")
jac_B2[is.na(jac_B2)] <- 0 # defining those as 0 distances
ait_B2 <- vegdist(Bac2@otu_table, method="aitchison", pseudocount=1)
ait_B2[is.na(ait_B2)] <- 0

BpermaJ2 <- adonis2(jac_B2~
                      Bac2@sam_data$Genome,
                  by="margin")
BpermaA2 <- adonis2(ait_B2~
                      Bac2@sam_data$Genome,
                  by="margin")
BpermaA2
BpermaJ2

groups <- sample_data(Bac)$Genome
mod <- betadisper(jac_B, groups)
anova(mod)
plot(mod, hull=FALSE, ellipse=TRUE)

modA <- betadisper(ait_B, groups)
anova(modA)
plot(modA, hull=FALSE, ellipse=TRUE)
boxplot(modA)

